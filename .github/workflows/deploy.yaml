name: Deploy Project
on:
    push:
        branches:
            - main

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
            -
                name: Get the code from repo
                uses: actions/checkout@v3
            -
                name: Install depencencies
                uses: actions/setup-node@v3
                with:
                    node-version: 18
            # -
            #     name: Get Yarn Dependency installation dir
            #     id: get-cache-dir
            #     run: echo 'dir=$(yarn config get cacheFolder)' >> $GITHUB_OUTPUT
            # -
            #     name: Cache dependencies
            #     uses: actions/cache@v3
            #     with:
            #         path: ${{ steps.get-cache-dir.outputs.dir }}
            #         key: deps-nodes-module-${{ hashFiles('**/yarn.lock') }}
            #         restore-keys: |
            #             ${{ runner.os }}-yarn-
            -   name: Get yarn cache directory path
                id: yarn-cache-dir-path
                run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            -   uses: actions/cache@v3
                id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
                with:
                    path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                    key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-yarn-
            -
                name: Install node dependencies
                run: yarn install
            -
                name: run the unit tests
                run: yarn test

    build:
        needs: test
        runs-on: ubuntu-latest
        steps:
                -
                    name: Get the code
                    uses: actions/checkout@v3
                # -
                #     name: Get Yarn Dependency installation dir
                #     id: get-cache-dir
                #     run: echo 'dir=$(yarn config get cacheFolder)' >> $GITHUB_OUTPUT
                # -
                #     name: Cache dependencies
                #     uses: actions/cache@v3
                #     with:
                #         path: ${{ steps.get-cache-dir.outputs.dir }}
                #         key: deps-nodes-module-${{ hashFiles('**/yarn.lock') }}
                #         restore-keys: |
                #             ${{ runner.os }}-yarn-
                -   name: Get yarn cache directory path
                    id: yarn-cache-dir-path
                    run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

                -   uses: actions/cache@v3
                    id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
                    with:
                        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                        restore-keys: |
                            ${{ runner.os }}-yarn-
                -
                    name: Install Node
                    uses: actions/setup-node@v3
                    with:
                        node-version: 18
                -
                    name: Install Node dependencies
                    run: yarn install
                -
                    name: build the project
                    run: yarn build
                -
                    name: Upload the artifact (the content of the built page)
                    uses: actions/upload-artifact@v3
                    with:
                        name: dist-files
                        path: dist
                        # path: | # adding multiple paths (so file and directory) to be upload as artifact
                        #     dist
                        #     package.json
    deploy:
        needs: build
        runs-on: ubuntu-latest
        steps:
            -
                name: Download built artifact
                uses: actions/download-artifact@v3
                with:
                    name: dist-files
            -
                name: List all the content
                run: ls > output.txt
            -
                name: Upload the output file
                uses: actions/upload-artifact@v3
                with:
                    name: output
                    path: output.txt
            -
                name: Deploy to vercel
                run: echo "The project has been deploy to vercel, uhuhu !!"